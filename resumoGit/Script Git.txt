- Versionamento de código

	-> Ferramentas de versionamento foram criadas para resolver o problema de gerenciamento de versões diferentes de um projeto de software.
	-> Antes da criação de softwares de versionamento, era uma dor de cabeça lidar com versões diferentes de um arquivo, vocês provavelmente passaram por isso em trabalhos na faculdade, para cada versão diferente do arquivo era preciso fazer uma cópia do arquivo antigo e geralmente para cada cópia atribuimos um nome tipo trabalhov1, trabalhov2....
	-> Trabalhando sozinho, no final do projeto você acabava tendo 10 ou mais versões do mesmo código com algumas modificações em todos os arquivos.
	-> Trabalhando em grupo vira uma bagunça, onde cada um acaba trabalhando em versões diferentes e na hora de juntar o trabalho é preciso procurar no arquivo onde foram feitas as modificações, serviço que dependendo do projeto pode levar horas ou dias.
	-> Vizando melhorar a vida dos programadores e empresas, surgiram os primeiros VCS (version control system) e SCM (source code managemnt) como por exemplo o bitkeeper, existiram outros versionadores mas para mais informações nerds extras indico esse video do Fabio Akita que explica a história do Git e como esses outros softwares funcionavam.
	-> Existem versionadores centralizados/linear ou distribuído.

- O que é git
	-> Tradução literal "idiota"
	-> O kernel do Linux é um projeto de código aberto, as mudanças no código eram compartilhadas por meio de patchs e arquivos, em 2002, o projeto da kernel do linux começou a usar uma DVCS() proprietária chamada BitKeeper.
	-> Em 2005, o BitKeeper passou a ser pago, isto alertou a comunidade que desenvolvia o Linux (especialmente Linus Torvalds, criador do Linux) a desenvolver a sua própria ferramenta baseada em lições aprendidas ao usar BitKeeper.
	-> Git se mostrou mais rápido e simples de usar que o BitKeeper.
	-> Ele cria arquivos que contem apenas as auterações e quando solicitamos ele junta esses arquivos criando um repositória que pode ser alterado ou clonado.
	-> Principais vantagens do Git
		-> Controle detalhado de histórico
		-> Trabalho distribuido em equipe ou equipes
		-> Ramificação do projeto (branches)
		-> Segurança
		-> organização
	-> https://git-scm.com/about/

- Como instalar
	-> Caso esteja usando Linux "sudo apt install git-all" ou "sudo dnf install git-all", dependendo da versão
		-> Caso esteja usando outra versão ler a documentação.

	-> Se estiver em Mac, a maneira mais fáil é instalar as ferramentas de linha de comando do Xcode. "git --version"
	-> Git é compativel com macOS, windows e Linux.
	-> Para baixar acessamos o site do Git (git-scm.com/downloads)
	-> Aceitar termos
	-> Deixar no default e avançar
	-> 

- Comandos básicos
	-> git init criar repositórios
	-> git add para adicionar um arquivo ao índice
	-> git clone para copiar um repositório
	-> git commit -m Para confirmar as alterações no header
	-> git status para exibir uma lista de arquivos alterador 
	-> git push envia as alterações feitas para o ramo pincipal
	-> git remote -v permite que um usuário se conecte a um repositório remoto
	-> git branch lista, criar ou excluir ramos
		-> git branch -d para excluir ramo
	-> git pull para mesclar todas as alterações rpesentes no repositório remoto para o diretório de trabalho
	-> git merge é usado para mesclar uma ramificação no ramo ativo
	-> git diff é usado apra listar os conflitos para visualizar conflitos com o arquivos base
	-> git log exibe uma lista de dados sobre o repositório
	-> git reset para redefinir o índice e o diretório de trabalho para o estado do útimo commit
	-> git rm usado para remover arquivos do diretório